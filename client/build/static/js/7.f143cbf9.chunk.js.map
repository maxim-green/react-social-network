{"version":3,"sources":["components/_shared/Input/InputTextarea/InputTextarea.tsx","components/_shared/Input/InputTextarea/InputTextarea.module.scss","components/Dialogs/Dialogs.module.scss","components/_forms/NewMessageForm/NewMessageForm.module.scss","components/Dialogs/Message/Message.module.scss","components/Dialogs/DialogButton/DialogButton.module.scss","components/_forms/NewMessageForm/NewMessageForm.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogButton/DialogButton.tsx","components/Dialogs/DialogHeader/DialogHeader.tsx","components/Dialogs/Dialogs.tsx","components/_pages/DialogsPage.tsx"],"names":["InputTextarea","name","label","rules","control","rows","disabled","placeholder","render","field","fieldState","required","error","className","classes","textarea","value","onChange","module","exports","NewMessageForm","onSubmit","Form","data","newMessageInput","initialValues","resetAfterSubmit","submitOnEnter","button","Button","Message","message","isAuthor","authUser","author","username","dispatch","useDispatch","useState","visible","setVisible","useEffect","isRead","readMessage","_id","isVisible","dialog","messageSelf","messageOther","gap","messageAvatar","Avatar","online","checkOnline","updatedAt","smallImg","avatar","small","size","messageAuthorName","firstName","text","DialogButton","lastName","to","dialogButton","activeClassName","active","title","trimString","DialogHeader","companion","padding","verticalAlign","style","fontWeight","Dialogs","messages","dialogs","onNewMessageSubmit","currentCompanion","listActive","setListActive","Card","classnames","header","dialogsListSwitch","type","onClick","Icon","width","height","dialogsList","map","d","slice","reverse","newMessageForm","DialogsPage","useParams","useSelector","state","sort","a","b","dateA","Date","dateB","currentDialogId","auth","user","find","openDialog","closeDialog","getDialogs","useAuthCheck","length","Helmet","trim","sendMessage"],"mappings":"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","file":"static/js/7.f143cbf9.chunk.js","sourcesContent":["import {Controller, RegisterOptions} from 'react-hook-form'\r\nimport {Control} from 'react-hook-form/dist/types/form'\r\nimport React from 'react'\r\nimport classes from './InputTextarea.module.scss'\r\nimport {Item} from 'components/_shared/Form/Form'\r\n\r\nexport type InputTextareaPropsType = {\r\n    name: string,\r\n    label?: string,\r\n    placeholder?: string,\r\n    rules?: RegisterOptions,\r\n    control?: Control,\r\n    rows?: number,\r\n    disabled?: boolean\r\n}\r\nexport const InputTextarea: React.FC<InputTextareaPropsType> = ({\r\n                                                                    name,\r\n                                                                    label,\r\n                                                                    rules,\r\n                                                                    control,\r\n                                                                    rows = 2,\r\n                                                                    disabled = false,\r\n    placeholder\r\n                                                                }) => {\r\n    return <Controller\r\n        control={control}\r\n        name={name}\r\n        rules={rules}\r\n        render={({field, fieldState}) => <Item label={label} required={!!rules?.required} error={fieldState.error}\r\n                                               disabled={disabled}>\r\n            <textarea\r\n                className={`${classes.textarea} ${fieldState.error ? classes.error : ''}`}\r\n                name={field.name}\r\n                value={field.value}\r\n                onChange={field.onChange}\r\n                rows={rows}\r\n                disabled={disabled}\r\n                placeholder={placeholder}\r\n            />\r\n        </Item>}\r\n    />\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dark\":\"InputTextarea_dark__c3Uh-\",\"textarea\":\"InputTextarea_textarea__29Lkx\",\"error\":\"InputTextarea_error__7n4iw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dark\":\"Dialogs_dark__1xs_7\",\"dialogs\":\"Dialogs_dialogs__3nzna\",\"dialogsList\":\"Dialogs_dialogsList__1s20C\",\"listActive\":\"Dialogs_listActive__2n8FH\",\"dialogsListSwitch\":\"Dialogs_dialogsListSwitch__1ekHK\",\"header\":\"Dialogs_header__ESqgA\",\"newMessageForm\":\"Dialogs_newMessageForm__1L--7\",\"messages\":\"Dialogs_messages__1XU6V\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dark\":\"NewMessageForm_dark__1Dm9s\",\"newMessageForm\":\"NewMessageForm_newMessageForm__2u-OS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dark\":\"Message_dark__3RzVL\",\"messageOther\":\"Message_messageOther__3fTLP\",\"messageSelf\":\"Message_messageSelf__1NjeZ\",\"messageAvatar\":\"Message_messageAvatar__ekUyS\",\"messageAuthorName\":\"Message_messageAuthorName__3SqBH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dark\":\"DialogButton_dark__1fPBj\",\"dialogButton\":\"DialogButton_dialogButton__1fLgP\",\"active\":\"DialogButton_active__SVkhj\"};","import classes from './NewMessageForm.module.scss'\r\nimport React from \"react\";\r\nimport {Button} from 'components/_shared/Button/Button'\r\nimport {Form, FormRow} from 'components/_shared/Form/Form'\r\nimport {InputTextarea} from 'components/_shared/Input/InputTextarea/InputTextarea'\r\n\r\ntype PropsType = {\r\n    onSubmit: (message: string) => void\r\n}\r\n\r\nconst NewMessageForm: React.FC<PropsType> = ({onSubmit}) => {\r\n\r\n    const submit = (data: { newMessageInput: string }) => {\r\n        onSubmit(data.newMessageInput)\r\n    }\r\n\r\n    return (\r\n        <Form onSubmit={submit} initialValues={{newMessageInput: ``}} resetAfterSubmit={true} submitOnEnter={true}>\r\n            <FormRow>\r\n                <InputTextarea name={'newMessageInput'}/>\r\n                <div className={classes.button}>\r\n                    <Button>Send</Button>\r\n                </div>\r\n            </FormRow>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default NewMessageForm","import React, {useEffect, useState} from 'react'\r\nimport classes from './Message.module.scss'\r\nimport {MessageType} from 'types/types'\r\nimport {useDispatch} from 'react-redux'\r\nimport {readMessage} from 'redux/reducers/dialogs.reducer'\r\nimport VisibilitySensor from \"react-visibility-sensor\"\r\nimport {Row, Space} from 'components/_shared/Flex/Flex'\r\nimport {Avatar} from 'components/_shared/Avatar/Avatar'\r\nimport {checkOnline} from 'utils/functions'\r\nimport {Check, CheckAll} from 'react-bootstrap-icons'\r\n\r\ntype Props = { message: MessageType, authUser: string }\r\n\r\nexport const Message: React.FC<Props> = ({message, authUser}) => {\r\n    const isAuthor = authUser === message.author.username\r\n    const dispatch = useDispatch()\r\n    const [visible, setVisible] = useState(false)\r\n\r\n    // todo think better way to read message. for example send 'read-message' event and handle it on server\r\n    const visibilityChangeHandler = (isVisible: boolean) => {\r\n        setVisible(isVisible)\r\n        if (visible && !message.isRead) dispatch(readMessage(message.dialog))\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (visible && !message.isRead && !isAuthor) dispatch(readMessage(message._id))\r\n    }, [visible])\r\n    return (\r\n        <VisibilitySensor onChange={visibilityChangeHandler}>\r\n            <div className={isAuthor ? classes.messageSelf : classes.messageOther}>\r\n                <Row gap={10}>\r\n                    <div className={classes.messageAvatar}>\r\n                        <Avatar online={checkOnline(message.author.updatedAt)} smallImg={message.author.avatar.small} size={30}/>\r\n                    </div>\r\n                    <div>\r\n                        <div className={classes.messageAuthorName}>{message.author.firstName}</div>\r\n                        <div>{message.text}</div>\r\n                    </div>\r\n                    <Space/>\r\n                    <div>\r\n                        {message.isRead ? <CheckAll/> : <Check/>}\r\n                    </div>\r\n                </Row>\r\n            </div>\r\n        </VisibilitySensor>\r\n    )\r\n}","import React from 'react'\r\nimport classes from './DialogButton.module.scss'\r\nimport {AvatarType} from 'types/types'\r\nimport {NavLink} from 'react-router-dom'\r\nimport {Avatar} from 'components/_shared/Avatar/Avatar'\r\nimport {trimString} from 'utils/functions'\r\n\r\ntype Props = { username: string, firstName: string, lastName: string, avatar: AvatarType }\r\nexport const DialogButton: React.FC<Props> = ({username, firstName, lastName, avatar}) => {\r\n    return (\r\n        <NavLink to={`/dialogs/${username}`} className={classes.dialogButton} activeClassName={classes.active} title={`${firstName} ${lastName}`}>\r\n            <Avatar size={30} name={trimString(firstName, 8)} smallImg={avatar.small}/>\r\n        </NavLink>\r\n    )\r\n}","import React from 'react'\r\nimport classes from './DialogHeader.module.scss'\r\nimport {Button} from 'components/_shared/Button/Button'\r\nimport {List} from 'react-bootstrap-icons'\r\nimport {Col, Row, Space} from 'components/_shared/Flex/Flex'\r\nimport {Avatar} from 'components/_shared/Avatar/Avatar'\r\nimport {checkOnline} from 'utils/functions'\r\nimport {UserItemDataType} from 'types/types'\r\n\r\ntype Props = {\r\n    companion: UserItemDataType\r\n}\r\n\r\nexport const DialogHeader: React.FC<Props> = ({ companion }) => {\r\n    return <Row padding={10} verticalAlign={'center'}>\r\n        <Space/>\r\n        <Col>\r\n            <div style={{fontWeight: 700}}>\r\n                {companion?.firstName} {companion?.lastName}\r\n            </div>\r\n        </Col>\r\n        <Space/>\r\n        <Avatar online={checkOnline(companion?.updatedAt)} smallImg={companion?.avatar.small} size={36}/>\r\n    </Row>\r\n}","import React, {useState} from 'react'\r\nimport classes from './Dialogs.module.scss'\r\nimport {DialogType, MessageType, UserItemDataType} from 'types/types'\r\nimport NewMessageForm from 'components/_forms/NewMessageForm/NewMessageForm'\r\nimport {Card} from 'components/_shared/Card/Card'\r\nimport {Avatar} from 'components/_shared/Avatar/Avatar'\r\nimport {Button} from 'components/_shared/Button/Button'\r\nimport {ArrowLeft, List} from 'react-bootstrap-icons'\r\nimport classnames from 'classnames'\r\nimport {Message} from 'components/Dialogs/Message/Message'\r\nimport {DialogButton} from 'components/Dialogs/DialogButton/DialogButton'\r\nimport {Col, Row, Space} from 'components/_shared/Flex/Flex'\r\nimport {checkOnline, trimString} from 'utils/functions'\r\nimport {DialogHeader} from 'components/Dialogs/DialogHeader/DialogHeader'\r\nimport {Visibility} from 'components/_shared/Visibility/Visibility'\r\n\r\ntype PropsType = {\r\n    messages: Array<MessageType>\r\n    dialogs: Array<DialogType>\r\n    currentCompanion?: UserItemDataType\r\n    authUser: string\r\n    onNewMessageSubmit: (message: string) => void\r\n}\r\n\r\nconst Dialogs: React.FC<PropsType> = ({messages, dialogs, authUser, onNewMessageSubmit, currentCompanion}) => {\r\n    const [listActive, setListActive] = useState<boolean>(false)\r\n\r\n    const showDialogsList = () => setListActive(true)\r\n    const hideDialogsList = () => setListActive(false)\r\n\r\n\r\n    return (\r\n        <Card>\r\n            <div className={classnames(classes.dialogs, {[classes.listActive]: listActive})}>\r\n\r\n\r\n                <div className={classes.header}>\r\n                    <div className={classes.dialogsListSwitch}>\r\n                        {!listActive && <Button type={'text'} size={'xl'} onClick={showDialogsList}>\r\n                            <Button.Icon><List width={22} height={22}/></Button.Icon>\r\n                        </Button>}\r\n                        {listActive && <Button type={'text'} size={'xl'} onClick={hideDialogsList}>\r\n                            <Button.Icon><ArrowLeft width={22} height={22}/></Button.Icon>\r\n                        </Button>}\r\n                    </div>\r\n                        {!!currentCompanion && <DialogHeader companion={currentCompanion}/>}\r\n                </div>\r\n\r\n                <div className={classnames(classes.dialogsList, {[classes.listActive]: listActive})}>\r\n                    {dialogs.map(d => <DialogButton key={d._id}\r\n                                                    username={d.companion.username}\r\n                                                    firstName={d.companion.firstName}\r\n                                                    lastName={d.companion.lastName}\r\n                                                    avatar={d.companion.avatar}\r\n                    />)}\r\n                </div>\r\n\r\n                <div className={classes.messages}>\r\n                    {messages.slice().reverse().map((message) => <Message key={message._id} message={message}\r\n                                                                          authUser={authUser}/>)}\r\n                </div>\r\n\r\n                <div className={classes.newMessageForm}>\r\n                    <NewMessageForm onSubmit={onNewMessageSubmit}/>\r\n                </div>\r\n\r\n            </div>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default Dialogs\r\n","import Dialogs from 'components/Dialogs/Dialogs'\r\nimport React, {useEffect} from 'react'\r\nimport {Redirect, useParams} from 'react-router-dom'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {StateType} from 'redux/store'\r\nimport {closeDialog, getDialogs, openDialog, sendMessage} from 'redux/reducers/dialogs.reducer'\r\nimport {useAuthCheck} from 'utils/hooks'\r\nimport {Helmet} from 'react-helmet'\r\n\r\n\r\nconst DialogsPage: React.FC = () => {\r\n    const {username}: { username: string } = useParams()\r\n    const dialogs = useSelector((state: StateType) => state.dialogs.dialogs.slice().sort((a, b) => {\r\n        const dateA = new Date(a.updatedAt)\r\n        const dateB = new Date(b.updatedAt)\r\n        if (dateA > dateB) return -1\r\n        if (dateA < dateB) return 1\r\n        return 0\r\n    }))\r\n    const currentDialogId = useSelector((state: StateType) => state.dialogs.currentDialogId)\r\n    const authUser = useSelector((state: StateType) => state.auth.user?.username)\r\n    const messages = useSelector((state: StateType) => state.dialogs.messages)\r\n    const currentCompanion = dialogs.find(dialog => dialog.companion.username === username)?.companion\r\n\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onNewMessageSubmit = (message: string) => {\r\n        if (message.trim() && currentDialogId) dispatch(sendMessage(message.trim(), currentDialogId))\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(openDialog(username))\r\n        return () => {\r\n            dispatch(closeDialog())\r\n        }\r\n    }, [username, dispatch])\r\n\r\n    useEffect(() => {\r\n        dispatch(getDialogs())\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        // console.log('message updated')\r\n        // if (currentDialogId) dispatch(readMessages(currentDialogId))\r\n    }, [messages, dispatch])\r\n\r\n\r\n    const authorized = useAuthCheck()\r\n    if (!authorized) return <Redirect to={'/login'}/>\r\n\r\n\r\n    // if no username specified in route, then redirect to latest dialog\r\n    if (!username && dialogs[0] && dialogs.length !== 0) return <Redirect\r\n        to={`/dialogs/${dialogs[0].companion.username}`}/>\r\n\r\n\r\n    return <>\r\n        {currentCompanion && <Helmet>\r\n            <title>Dialog - {currentCompanion.firstName} {currentCompanion.lastName}</title>\r\n        </Helmet>}\r\n        <Dialogs\r\n        messages={messages}\r\n        dialogs={dialogs}\r\n        currentCompanion={currentCompanion}\r\n        authUser={authUser || ''}\r\n        onNewMessageSubmit={onNewMessageSubmit}\r\n    /></>\r\n}\r\n\r\n\r\nexport default DialogsPage\r\n"],"sourceRoot":""}