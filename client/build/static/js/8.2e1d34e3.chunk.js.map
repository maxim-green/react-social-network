{"version":3,"sources":["hooks/useTypedSelector.ts","hooks/useAuth.ts","components/_shared/Input/InputTextarea/InputTextarea.tsx","components/_shared/Input/InputTextarea/InputTextarea.module.scss","components/Dialogs/Dialogs.module.scss","components/_forms/NewMessageForm/NewMessageForm.module.scss","components/Dialogs/Message/Message.module.scss","components/Dialogs/DialogButton/DialogButton.module.scss","components/_forms/NewMessageForm/NewMessageForm.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogButton/DialogButton.tsx","components/Dialogs/DialogHeader/DialogHeader.tsx","components/Dialogs/Dialogs.tsx","components/_pages/DialogsPage.tsx"],"names":["useTypedSelector","useSelector","useAuth","dispatch","useDispatch","useEffect","getAuthUserData","state","auth","authorized","InputTextarea","name","label","rules","control","rows","disabled","placeholder","render","field","fieldState","required","error","className","classes","textarea","value","onChange","module","exports","NewMessageForm","onSubmit","Form","data","newMessageInput","initialValues","resetAfterSubmit","submitOnEnter","button","Button","Message","message","isAuthor","authUser","author","username","useState","visible","setVisible","isRead","readMessage","_id","isVisible","dialog","messageSelf","messageOther","gap","messageAvatar","Avatar","online","checkOnline","updatedAt","smallImg","avatar","small","size","messageAuthorName","firstName","text","DialogButton","lastName","to","dialogButton","activeClassName","active","title","trimString","DialogHeader","companion","padding","verticalAlign","style","fontWeight","Dialogs","messages","dialogs","onNewMessageSubmit","currentCompanion","listActive","setListActive","Card","classnames","header","dialogsListSwitch","type","onClick","Icon","width","height","dialogsList","map","d","slice","reverse","newMessageForm","DialogsPage","useParams","sort","a","b","dateA","Date","dateB","currentDialogId","user","find","openDialog","closeDialog","getDialogs","length","Helmet","trim","sendMessage"],"mappings":"iMAKeA,EAF2CC,ICE7CC,EAAU,WACnB,IAAMC,EAAWC,cAKjB,OAJAC,qBAAU,WACNF,EAASG,iBACV,CAACH,IAEGH,GAAiB,SAAAO,GAAK,OAAIA,EAAMC,KAAKC,gB,iCCXhD,sFAeaC,EAAkD,SAAC,GAQO,IAPHC,EAOE,EAPFA,KACAC,EAME,EANFA,MACAC,EAKE,EALFA,MACAC,EAIE,EAJFA,QAIE,IAHFC,YAGE,MAHK,EAGL,MAFFC,gBAEE,SADlEC,EACkE,EADlEA,YAEA,OAAO,cAAC,IAAD,CACHH,QAASA,EACTH,KAAMA,EACNE,MAAOA,EACPK,OAAQ,gBAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,WAAT,OAAyB,cAAC,IAAD,CAAMR,MAAOA,EAAOS,WAAW,OAACR,QAAD,IAACA,MAAOQ,UAAUC,MAAOF,EAAWE,MAC7DN,SAAUA,EADhB,SAE7B,0BACIO,UAAS,UAAKC,IAAQC,SAAb,YAAyBL,EAAWE,MAAQE,IAAQF,MAAQ,IACrEX,KAAMQ,EAAMR,KACZe,MAAOP,EAAMO,MACbC,SAAUR,EAAMQ,SAChBZ,KAAMA,EACNC,SAAUA,EACVC,YAAaA,W,oBCpC7BW,EAAOC,QAAU,CAAC,KAAO,4BAA4B,SAAW,gCAAgC,MAAQ,+B,oBCAxGD,EAAOC,QAAU,CAAC,KAAO,sBAAsB,QAAU,yBAAyB,YAAc,6BAA6B,WAAa,4BAA4B,kBAAoB,mCAAmC,OAAS,wBAAwB,eAAiB,gCAAgC,SAAW,4B,oBCA1TD,EAAOC,QAAU,CAAC,KAAO,6BAA6B,eAAiB,yC,oBCAvED,EAAOC,QAAU,CAAC,KAAO,sBAAsB,aAAe,8BAA8B,YAAc,6BAA6B,cAAgB,+BAA+B,kBAAoB,qC,oBCA1MD,EAAOC,QAAU,CAAC,KAAO,2BAA2B,aAAe,mCAAmC,OAAS,+B,qIC2BhGC,EAlB6B,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAM1C,OACI,cAACC,EAAA,EAAD,CAAMD,SALK,SAACE,GACZF,EAASE,EAAKC,kBAIUC,cAAe,CAACD,gBAAgB,IAAME,kBAAkB,EAAMC,eAAe,EAArG,SACI,eAACL,EAAA,EAAD,WACI,cAACtB,EAAA,EAAD,CAAeC,KAAM,oBACrB,qBAAKY,UAAWC,IAAQc,OAAxB,SACI,cAACC,EAAA,EAAD,2B,yICRPC,EAA2B,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,QAChCC,EADuD,EAAdC,WACjBF,EAAQG,OAAOC,SACvC1C,EAAWC,cACjB,EAA8B0C,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAWA,OAHA3C,qBAAU,YACF0C,GAAYN,EAAQQ,QAAWP,GAAUvC,EAAS+C,YAAYT,EAAQU,QAC3E,CAACJ,IAEA,cAAC,IAAD,CAAkBpB,SATU,SAACyB,GAC7BJ,EAAWI,GACPL,IAAYN,EAAQQ,QAAQ9C,EAAS+C,YAAYT,EAAQY,UAO7D,SACI,qBAAK9B,UAAWmB,EAAWlB,IAAQ8B,YAAc9B,IAAQ+B,aAAzD,SACI,eAAC,IAAD,CAAKC,IAAK,GAAV,UACI,qBAAKjC,UAAWC,IAAQiC,cAAxB,SACI,cAACC,EAAA,EAAD,CAAQC,OAAQC,YAAYnB,EAAQG,OAAOiB,WAAYC,SAAUrB,EAAQG,OAAOmB,OAAOC,MAAOC,KAAM,OAExG,gCACI,qBAAK1C,UAAWC,IAAQ0C,kBAAxB,SAA4CzB,EAAQG,OAAOuB,YAC3D,8BAAM1B,EAAQ2B,UAElB,cAAC,IAAD,IACA,8BACK3B,EAAQQ,OAAS,cAAC,IAAD,IAAc,cAAC,IAAD,c,0BChC3CoB,EAAgC,SAAC,GAA6C,IAA5CxB,EAA2C,EAA3CA,SAAUsB,EAAiC,EAAjCA,UAAWG,EAAsB,EAAtBA,SAAUP,EAAY,EAAZA,OAC1E,OACI,cAAC,IAAD,CAASQ,GAAE,mBAAc1B,GAAYtB,UAAWC,IAAQgD,aAAcC,gBAAiBjD,IAAQkD,OAAQC,MAAK,UAAKR,EAAL,YAAkBG,GAA9H,SACI,cAACZ,EAAA,EAAD,CAAQO,KAAM,GAAItD,KAAMiE,YAAWT,EAAW,GAAIL,SAAUC,EAAOC,WCElEa,EAAgC,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAC5C,OAAO,eAAC,IAAD,CAAKC,QAAS,GAAIC,cAAe,SAAjC,UACH,cAAC,IAAD,IACA,cAAC,IAAD,UACI,sBAAKC,MAAO,CAACC,WAAY,KAAzB,iBACKJ,QADL,IACKA,OADL,EACKA,EAAWX,UADhB,WAC4BW,QAD5B,IAC4BA,OAD5B,EAC4BA,EAAWR,cAG3C,cAAC,IAAD,IACA,cAACZ,EAAA,EAAD,CAAQC,OAAQC,YAAW,OAACkB,QAAD,IAACA,OAAD,EAACA,EAAWjB,WAAYC,SAAQ,OAAEgB,QAAF,IAAEA,OAAF,EAAEA,EAAWf,OAAOC,MAAOC,KAAM,SCiDrFkB,EA/CsB,SAAC,GAAyE,IAAxEC,EAAuE,EAAvEA,SAAUC,EAA6D,EAA7DA,QAAS1C,EAAoD,EAApDA,SAAU2C,EAA0C,EAA1CA,mBAAoBC,EAAsB,EAAtBA,iBACpF,EAAoCzC,oBAAkB,GAAtD,mBAAO0C,EAAP,KAAmBC,EAAnB,KAMA,OACI,cAACC,EAAA,EAAD,UACI,sBAAKnE,UAAWoE,IAAWnE,IAAQ6D,QAAT,eAAoB7D,IAAQgE,WAAaA,IAAnE,UAGI,sBAAKjE,UAAWC,IAAQoE,OAAxB,UACI,sBAAKrE,UAAWC,IAAQqE,kBAAxB,WACML,GAAc,cAACjD,EAAA,EAAD,CAAQuD,KAAM,OAAQ7B,KAAM,KAAM8B,QAX9C,kBAAMN,GAAc,IAWR,SACZ,cAAClD,EAAA,EAAOyD,KAAR,UAAa,cAAC,IAAD,CAAMC,MAAO,GAAIC,OAAQ,SAEzCV,GAAc,cAACjD,EAAA,EAAD,CAAQuD,KAAM,OAAQ7B,KAAM,KAAM8B,QAb7C,kBAAMN,GAAc,IAaT,SACX,cAAClD,EAAA,EAAOyD,KAAR,UAAa,cAAC,IAAD,CAAWC,MAAO,GAAIC,OAAQ,cAG5CX,GAAoB,cAAC,EAAD,CAAcT,UAAWS,OAGxD,qBAAKhE,UAAWoE,IAAWnE,IAAQ2E,YAAT,eAAwB3E,IAAQgE,WAAaA,IAAvE,SACKH,EAAQe,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CACcxD,SAAUwD,EAAEvB,UAAUjC,SACtBsB,UAAWkC,EAAEvB,UAAUX,UACvBG,SAAU+B,EAAEvB,UAAUR,SACtBP,OAAQsC,EAAEvB,UAAUf,QAJfsC,EAAElD,UAQ3C,qBAAK5B,UAAWC,IAAQ4D,SAAxB,SACKA,EAASkB,QAAQC,UAAUH,KAAI,SAAC3D,GAAD,OAAa,cAAC,EAAD,CAA2BA,QAASA,EAC3BE,SAAUA,GADLF,EAAQU,UAIvE,qBAAK5B,UAAWC,IAAQgF,eAAxB,SACI,cAAC,EAAD,CAAgBzE,SAAUuD,Y,0BCQ/BmB,UA7De,WAAO,IAAD,EACzB5D,EAAkC6D,cAAlC7D,SACDwC,EAAUpF,aAAY,SAACM,GAAD,OAAsBA,EAAM8E,QAAQA,QAAQiB,QAAQK,MAAK,SAACC,EAAGC,GACrF,IAAMC,EAAQ,IAAIC,KAAKH,EAAE/C,WACnBmD,EAAQ,IAAID,KAAKF,EAAEhD,WACzB,OAAIiD,EAAQE,GAAe,EACvBF,EAAQE,EAAc,EACnB,QAELC,EAAkBhH,aAAY,SAACM,GAAD,OAAsBA,EAAM8E,QAAQ4B,mBAClEtE,EAAW1C,aAAY,SAACM,GAAD,uBAAsBA,EAAMC,KAAK0G,YAAjC,aAAsB,EAAiBrE,YAC9DuC,EAAWnF,aAAY,SAACM,GAAD,OAAsBA,EAAM8E,QAAQD,YAC3DG,EAAgB,UAAGF,EAAQ8B,MAAK,SAAA9D,GAAM,OAAIA,EAAOyB,UAAUjC,WAAaA,YAAxD,aAAG,EAAgEiC,UAGnF3E,EAAWC,cAwBjB,OAlBAC,qBAAU,WAEN,OADAF,EAASiH,YAAWvE,IACb,WACH1C,EAASkH,kBAEd,CAACxE,EAAU1C,IAEdE,qBAAU,WACNF,EAASmH,iBACV,CAACnH,IAEJE,qBAAU,cAGP,CAAC+E,EAAUjF,IAGKD,eAKd2C,GAAYwC,EAAQ,IAAyB,IAAnBA,EAAQkC,OAAqB,cAAC,IAAD,CACxDhD,GAAE,mBAAcc,EAAQ,GAAGP,UAAUjC,YAGlC,qCACF0C,GAAoB,cAACiC,EAAA,EAAD,UACjB,8CAAiBjC,EAAiBpB,UAAlC,IAA8CoB,EAAiBjB,cAEnE,cAAC,EAAD,CACAc,SAAUA,EACVC,QAASA,EACTE,iBAAkBA,EAClB5C,SAAUA,GAAY,GACtB2C,mBAvCuB,SAAC7C,GACpBA,EAAQgF,QAAUR,GAAiB9G,EAASuH,YAAYjF,EAAQgF,OAAQR,UAqBxD,cAAC,IAAD,CAAU1C,GAAI","file":"static/js/8.2e1d34e3.chunk.js","sourcesContent":["import {TypedUseSelectorHook, useSelector} from 'react-redux'\nimport {RootState} from '../store/store'\n\nconst useTypedSelector: TypedUseSelectorHook<RootState> = useSelector\n\nexport default useTypedSelector\n","import {useDispatch} from 'react-redux'\nimport {useEffect} from 'react'\nimport {getAuthUserData} from '../store/reducers/auth.reducer'\nimport useTypedSelector from './useTypedSelector'\n\nexport const useAuth = () => {\n    const dispatch = useDispatch()\n    useEffect(() => {\n        dispatch(getAuthUserData())\n    }, [dispatch])\n\n    return useTypedSelector(state => state.auth.authorized)\n}\n","import {Controller, RegisterOptions} from 'react-hook-form'\nimport {Control} from 'react-hook-form/dist/types/form'\nimport React from 'react'\nimport classes from './InputTextarea.module.scss'\nimport {Item} from 'components/_shared/Form/Form'\n\nexport type InputTextareaPropsType = {\n    name: string,\n    label?: string,\n    placeholder?: string,\n    rules?: RegisterOptions,\n    control?: Control,\n    rows?: number,\n    disabled?: boolean\n}\nexport const InputTextarea: React.FC<InputTextareaPropsType> = ({\n                                                                    name,\n                                                                    label,\n                                                                    rules,\n                                                                    control,\n                                                                    rows = 2,\n                                                                    disabled = false,\n    placeholder\n                                                                }) => {\n    return <Controller\n        control={control}\n        name={name}\n        rules={rules}\n        render={({field, fieldState}) => <Item label={label} required={!!rules?.required} error={fieldState.error}\n                                               disabled={disabled}>\n            <textarea\n                className={`${classes.textarea} ${fieldState.error ? classes.error : ''}`}\n                name={field.name}\n                value={field.value}\n                onChange={field.onChange}\n                rows={rows}\n                disabled={disabled}\n                placeholder={placeholder}\n            />\n        </Item>}\n    />\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dark\":\"InputTextarea_dark__1Bvup\",\"textarea\":\"InputTextarea_textarea__3KxMk\",\"error\":\"InputTextarea_error__lL7Wo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dark\":\"Dialogs_dark__2e1-h\",\"dialogs\":\"Dialogs_dialogs__2Gkkf\",\"dialogsList\":\"Dialogs_dialogsList__2Ipwc\",\"listActive\":\"Dialogs_listActive__2-6kS\",\"dialogsListSwitch\":\"Dialogs_dialogsListSwitch__3k4Uj\",\"header\":\"Dialogs_header__xjhog\",\"newMessageForm\":\"Dialogs_newMessageForm__19zd-\",\"messages\":\"Dialogs_messages__1J3nn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dark\":\"NewMessageForm_dark__2tbhf\",\"newMessageForm\":\"NewMessageForm_newMessageForm__RJt-t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dark\":\"Message_dark__TqOZM\",\"messageOther\":\"Message_messageOther__2ClsO\",\"messageSelf\":\"Message_messageSelf__1RCL9\",\"messageAvatar\":\"Message_messageAvatar__3Rf_d\",\"messageAuthorName\":\"Message_messageAuthorName__2nozg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dark\":\"DialogButton_dark__12RPZ\",\"dialogButton\":\"DialogButton_dialogButton__1280a\",\"active\":\"DialogButton_active__3QzMS\"};","import classes from './NewMessageForm.module.scss'\nimport React from \"react\";\nimport {Button} from 'components/_shared/Button/Button'\nimport {Form, FormRow} from 'components/_shared/Form/Form'\nimport {InputTextarea} from 'components/_shared/Input/InputTextarea/InputTextarea'\n\ntype PropsType = {\n    onSubmit: (message: string) => void\n}\n\nconst NewMessageForm: React.FC<PropsType> = ({onSubmit}) => {\n\n    const submit = (data: { newMessageInput: string }) => {\n        onSubmit(data.newMessageInput)\n    }\n\n    return (\n        <Form onSubmit={submit} initialValues={{newMessageInput: ``}} resetAfterSubmit={true} submitOnEnter={true}>\n            <FormRow>\n                <InputTextarea name={'newMessageInput'}/>\n                <div className={classes.button}>\n                    <Button>Send</Button>\n                </div>\n            </FormRow>\n        </Form>\n    )\n}\n\nexport default NewMessageForm","import React, {useEffect, useState} from 'react'\nimport classes from './Message.module.scss'\nimport {MessageType} from 'types/types'\nimport {useDispatch} from 'react-redux'\nimport {readMessage} from 'store/reducers/dialogs.reducer'\nimport VisibilitySensor from \"react-visibility-sensor\"\nimport {Row, Space} from 'components/_shared/Flex/Flex'\nimport {Avatar} from 'components/_shared/Avatar/Avatar'\nimport {checkOnline} from 'utils/functions'\nimport {Check, CheckAll} from 'react-bootstrap-icons'\n\ntype Props = { message: MessageType, authUser: string }\n\nexport const Message: React.FC<Props> = ({message, authUser}) => {\n    const isAuthor = authUser === message.author.username\n    const dispatch = useDispatch()\n    const [visible, setVisible] = useState(false)\n\n    // todo think better way to read message. for example send 'read-message' event and handle it on server\n    const visibilityChangeHandler = (isVisible: boolean) => {\n        setVisible(isVisible)\n        if (visible && !message.isRead) dispatch(readMessage(message.dialog))\n    }\n\n    useEffect(() => {\n        if (visible && !message.isRead && !isAuthor) dispatch(readMessage(message._id))\n    }, [visible])\n    return (\n        <VisibilitySensor onChange={visibilityChangeHandler}>\n            <div className={isAuthor ? classes.messageSelf : classes.messageOther}>\n                <Row gap={10}>\n                    <div className={classes.messageAvatar}>\n                        <Avatar online={checkOnline(message.author.updatedAt)} smallImg={message.author.avatar.small} size={30}/>\n                    </div>\n                    <div>\n                        <div className={classes.messageAuthorName}>{message.author.firstName}</div>\n                        <div>{message.text}</div>\n                    </div>\n                    <Space/>\n                    <div>\n                        {message.isRead ? <CheckAll/> : <Check/>}\n                    </div>\n                </Row>\n            </div>\n        </VisibilitySensor>\n    )\n}\n","import React from 'react'\nimport classes from './DialogButton.module.scss'\nimport {AvatarType} from 'types/types'\nimport {NavLink} from 'react-router-dom'\nimport {Avatar} from 'components/_shared/Avatar/Avatar'\nimport {trimString} from 'utils/functions'\n\ntype Props = { username: string, firstName: string, lastName: string, avatar: AvatarType }\nexport const DialogButton: React.FC<Props> = ({username, firstName, lastName, avatar}) => {\n    return (\n        <NavLink to={`/dialogs/${username}`} className={classes.dialogButton} activeClassName={classes.active} title={`${firstName} ${lastName}`}>\n            <Avatar size={30} name={trimString(firstName, 8)} smallImg={avatar.small}/>\n        </NavLink>\n    )\n}","import React from 'react'\nimport classes from './DialogHeader.module.scss'\nimport {Button} from 'components/_shared/Button/Button'\nimport {List} from 'react-bootstrap-icons'\nimport {Col, Row, Space} from 'components/_shared/Flex/Flex'\nimport {Avatar} from 'components/_shared/Avatar/Avatar'\nimport {checkOnline} from 'utils/functions'\nimport {UserItemDataType} from 'types/types'\n\ntype Props = {\n    companion: UserItemDataType\n}\n\nexport const DialogHeader: React.FC<Props> = ({ companion }) => {\n    return <Row padding={10} verticalAlign={'center'}>\n        <Space/>\n        <Col>\n            <div style={{fontWeight: 700}}>\n                {companion?.firstName} {companion?.lastName}\n            </div>\n        </Col>\n        <Space/>\n        <Avatar online={checkOnline(companion?.updatedAt)} smallImg={companion?.avatar.small} size={36}/>\n    </Row>\n}","import React, {useState} from 'react'\nimport classes from './Dialogs.module.scss'\nimport {DialogType, MessageType, UserItemDataType} from 'types/types'\nimport NewMessageForm from 'components/_forms/NewMessageForm/NewMessageForm'\nimport {Card} from 'components/_shared/Card/Card'\nimport {Avatar} from 'components/_shared/Avatar/Avatar'\nimport {Button} from 'components/_shared/Button/Button'\nimport {ArrowLeft, List} from 'react-bootstrap-icons'\nimport classnames from 'classnames'\nimport {Message} from 'components/Dialogs/Message/Message'\nimport {DialogButton} from 'components/Dialogs/DialogButton/DialogButton'\nimport {Col, Row, Space} from 'components/_shared/Flex/Flex'\nimport {checkOnline, trimString} from 'utils/functions'\nimport {DialogHeader} from 'components/Dialogs/DialogHeader/DialogHeader'\nimport {Visibility} from 'components/_shared/Visibility/Visibility'\n\ntype PropsType = {\n    messages: Array<MessageType>\n    dialogs: Array<DialogType>\n    currentCompanion?: UserItemDataType\n    authUser: string\n    onNewMessageSubmit: (message: string) => void\n}\n\nconst Dialogs: React.FC<PropsType> = ({messages, dialogs, authUser, onNewMessageSubmit, currentCompanion}) => {\n    const [listActive, setListActive] = useState<boolean>(false)\n\n    const showDialogsList = () => setListActive(true)\n    const hideDialogsList = () => setListActive(false)\n\n\n    return (\n        <Card>\n            <div className={classnames(classes.dialogs, {[classes.listActive]: listActive})}>\n\n\n                <div className={classes.header}>\n                    <div className={classes.dialogsListSwitch}>\n                        {!listActive && <Button type={'text'} size={'xl'} onClick={showDialogsList}>\n                            <Button.Icon><List width={22} height={22}/></Button.Icon>\n                        </Button>}\n                        {listActive && <Button type={'text'} size={'xl'} onClick={hideDialogsList}>\n                            <Button.Icon><ArrowLeft width={22} height={22}/></Button.Icon>\n                        </Button>}\n                    </div>\n                        {!!currentCompanion && <DialogHeader companion={currentCompanion}/>}\n                </div>\n\n                <div className={classnames(classes.dialogsList, {[classes.listActive]: listActive})}>\n                    {dialogs.map(d => <DialogButton key={d._id}\n                                                    username={d.companion.username}\n                                                    firstName={d.companion.firstName}\n                                                    lastName={d.companion.lastName}\n                                                    avatar={d.companion.avatar}\n                    />)}\n                </div>\n\n                <div className={classes.messages}>\n                    {messages.slice().reverse().map((message) => <Message key={message._id} message={message}\n                                                                          authUser={authUser}/>)}\n                </div>\n\n                <div className={classes.newMessageForm}>\n                    <NewMessageForm onSubmit={onNewMessageSubmit}/>\n                </div>\n\n            </div>\n        </Card>\n    )\n}\n\nexport default Dialogs\n","import Dialogs from 'components/Dialogs/Dialogs'\nimport React, {useEffect} from 'react'\nimport {Redirect, useParams} from 'react-router-dom'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {RootState} from 'store/store'\nimport {closeDialog, getDialogs, openDialog, sendMessage} from 'store/reducers/dialogs.reducer'\nimport {Helmet} from 'react-helmet'\nimport {useAuth} from '../../hooks/useAuth'\n\n\nconst DialogsPage: React.FC = () => {\n    const {username}: { username: string } = useParams()\n    const dialogs = useSelector((state: RootState) => state.dialogs.dialogs.slice().sort((a, b) => {\n        const dateA = new Date(a.updatedAt)\n        const dateB = new Date(b.updatedAt)\n        if (dateA > dateB) return -1\n        if (dateA < dateB) return 1\n        return 0\n    }))\n    const currentDialogId = useSelector((state: RootState) => state.dialogs.currentDialogId)\n    const authUser = useSelector((state: RootState) => state.auth.user?.username)\n    const messages = useSelector((state: RootState) => state.dialogs.messages)\n    const currentCompanion = dialogs.find(dialog => dialog.companion.username === username)?.companion\n\n\n    const dispatch = useDispatch()\n\n    const onNewMessageSubmit = (message: string) => {\n        if (message.trim() && currentDialogId) dispatch(sendMessage(message.trim(), currentDialogId))\n    }\n\n    useEffect(() => {\n        dispatch(openDialog(username))\n        return () => {\n            dispatch(closeDialog())\n        }\n    }, [username, dispatch])\n\n    useEffect(() => {\n        dispatch(getDialogs())\n    }, [dispatch])\n\n    useEffect(() => {\n        // console.log('message updated')\n        // if (currentDialogId) dispatch(readMessages(currentDialogId))\n    }, [messages, dispatch])\n\n\n    const authorized = useAuth()\n    if (!authorized) return <Redirect to={'/login'}/>\n\n\n    // if no username specified in route, then redirect to latest dialog\n    if (!username && dialogs[0] && dialogs.length !== 0) return <Redirect\n        to={`/dialogs/${dialogs[0].companion.username}`}/>\n\n\n    return <>\n        {currentCompanion && <Helmet>\n            <title>Dialog - {currentCompanion.firstName} {currentCompanion.lastName}</title>\n        </Helmet>}\n        <Dialogs\n        messages={messages}\n        dialogs={dialogs}\n        currentCompanion={currentCompanion}\n        authUser={authUser || ''}\n        onNewMessageSubmit={onNewMessageSubmit}\n    /></>\n}\n\n\nexport default DialogsPage\n"],"sourceRoot":""}