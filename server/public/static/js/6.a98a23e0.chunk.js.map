{"version":3,"sources":["utils/functions.ts","components/Post/PostHeader/PostHeader.module.scss","components/_shared/ConfirmPopup/ConfirmPopup.module.scss","components/Post/PostText/PostText.module.scss","components/Post/PostComments/PostComments.module.scss","components/_forms/AddPostCommentForm/AddPostCommentForm.module.scss","components/Post/PostComments/PostComment/PostComment.module.scss","components/_shared/ConfirmPopup/ConfirmPopup.tsx","components/_shared/Button/DeleteButton/DeleteButton.tsx","components/Post/PostHeader/PostHeader.tsx","components/Post/PostText/PostText.tsx","components/Post/PostControls/PostControls.tsx","components/_forms/AddPostCommentForm/AddPostCommentForm.tsx","components/Post/PostComments/PostComment/PostComment.tsx","components/_shared/Button/ShowMoreButton/ShowMoreButton.tsx","components/Post/PostComments/PostCommentsList/PostCommentsList.tsx","components/Post/PostComments/PostComments.tsx","components/Post/Post.tsx","components/_pages/PostPage.tsx"],"names":["formatDate","date","format","moment","module","exports","ConfirmPopup","open","children","confirmButtonText","declineButtonText","onConfirm","onDecline","important","ModalWindow","className","classes","question","buttons","Button","type","onClick","Text","DeleteButton","onDelete","warningMessage","disabled","useState","setOpen","size","Icon","color","colors","textMid","PostHeader","id","author","isAuthor","padding","gap","to","username","Avatar","smallImg","avatar","small","online","verticalAlign","userName","firstName","lastName","PostText","bordered","text","PostControls","likes","isLiked","onLikeClick","onCommentClick","onShareClick","horizontalAlign","stretch","length","accent","AddPostCommentForm","onAddComment","authorizedUser","useSelector","state","auth","user","Form","onSubmit","data","initialValues","resetAfterSubmit","tabIndex","undefined","InputText","name","placeholder","PostComment","_id","createdAt","authorizedUserId","ShowMoreButton","route","PostCommentsList","active","comments","postId","slice","reverse","map","comment","PostComments","onAddCommentClick","onDeleteCommentClick","classnames","Post","post","onPostDelete","onPostAddLike","onPostDeleteLike","onDeleteComment","commentSectionActive","setCommentSectionActive","includes","Card","console","log","commentId","PostPage","useParams","dispatch","useDispatch","posts","useEffect","getPost","addPostLike","deletePostLike","deletePost","addPostComment","deletePostComment"],"mappings":"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","file":"static/js/6.a98a23e0.chunk.js","sourcesContent":["import moment from 'moment'\n\nexport const capitalize = (sourceString: string): string => {\n    return sourceString.charAt(0).toUpperCase() + sourceString.slice(1)\n}\n\nexport const formatDate = (date: Date | string, format: string = 'DD.MM.YYYY') => {\n    return moment(date).format(format)\n}\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dark\":\"PostHeader_dark__pjQLY\",\"userName\":\"PostHeader_userName__2YXtN\",\"date\":\"PostHeader_date__3zA_Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dark\":\"ConfirmPopup_dark__2y3YS\",\"question\":\"ConfirmPopup_question__3Kzew\",\"buttons\":\"ConfirmPopup_buttons__3ECl6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dark\":\"PostText_dark__ialK7\",\"text\":\"PostText_text__1HhJY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dark\":\"PostComments_dark__2sxGn\",\"comments\":\"PostComments_comments__2UDJ9\",\"active\":\"PostComments_active__ADYYh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dark\":\"AddPostCommentForm_dark__FAmPE\",\"avatar\":\"AddPostCommentForm_avatar__yTG42\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dark\":\"PostComment_dark__2hJca\",\"author\":\"PostComment_author__1TTdq\",\"date\":\"PostComment_date__2pUUD\"};","import React from 'react'\nimport classes from './ConfirmPopup.module.scss'\nimport {Button} from 'components/_shared/Button/Button'\nimport {ModalWindow} from 'components/_shared/ModalWindow/ModalWindow'\n\ntype ConfirmPopupPropsType = {\n    open: boolean\n    confirmButtonText?: string\n    declineButtonText?: string\n    onConfirm: () => void\n    onDecline: () => void\n    important?: boolean\n}\nexport const ConfirmPopup: React.FC<ConfirmPopupPropsType> = ({\n                                                           open,\n                                                           children,\n                                                           confirmButtonText = 'Ok',\n                                                           declineButtonText = 'Cancel',\n                                                           onConfirm,\n                                                           onDecline,\n                                                           important = false\n                                                       }) => {\n    return (<ModalWindow open={open}>\n        <div>\n            <div className={classes.question}>{children}</div>\n            <div className={classes.buttons}>\n                <Button type={important ? 'cancel' : 'primary'} onClick={onConfirm}>\n                    <Button.Text>{confirmButtonText}</Button.Text>\n                </Button>\n                <Button type={important ? 'primary' : 'secondary'} onClick={onDecline}>\n                    <Button.Text>{declineButtonText}</Button.Text>\n                </Button>\n            </div>\n        </div>\n    </ModalWindow>)\n}","import React, {useState} from 'react'\nimport {Button} from 'components/_shared/Button/Button'\nimport {TrashFill} from 'react-bootstrap-icons'\nimport colors from 'assets/styles/colors.module.scss'\nimport {ConfirmPopup} from 'components/_shared/ConfirmPopup/ConfirmPopup'\n\ntype DeleteButtonType = {\n    disabled?: boolean\n    warningMessage?: string\n    onDelete: () => void\n}\nexport const DeleteButton: React.FC<DeleteButtonType> = ({onDelete, warningMessage, disabled= false}) => {\n    const [open, setOpen] = useState(false)\n    const openModal = () => setOpen(true)\n    const closeModal = () => setOpen(false)\n\n    return <Button onClick={warningMessage ? openModal : onDelete} type=\"text\" size=\"sm\" disabled={disabled}>\n            <Button.Icon>\n                <TrashFill color={colors.textMid} size={16}/>\n            </Button.Icon>\n            <ConfirmPopup\n                open={open}\n                onConfirm={onDelete}\n                onDecline={closeModal}\n                important\n            >\n                {warningMessage}\n            </ConfirmPopup>\n        </Button>\n\n}\n","import React from 'react'\nimport classes from './PostHeader.module.scss'\nimport {UserItemDataType} from 'types/types'\nimport {NavLink} from 'react-router-dom'\nimport {Avatar} from 'components/_shared/Avatar/Avatar'\nimport {Col, Row, Space} from 'components/_shared/Flex/Flex'\nimport {DeleteButton} from 'components/_shared/Button/DeleteButton/DeleteButton'\nimport {Button} from '../../_shared/Button/Button'\nimport {PencilFill} from 'react-bootstrap-icons'\nimport colors from '../../../assets/styles/colors.module.scss'\n\ntype PropsType = {\n    id: string\n    date: string\n    author: UserItemDataType\n    isAuthor: boolean\n    onDelete: () => void\n}\nexport const PostHeader: React.FC<PropsType> = ({\n                                                    id,\n                                                    date,\n                                                    author,\n                                                    isAuthor,\n                                                    onDelete\n                                                }) => {\n    return <Row padding={20} gap={20}>\n        <NavLink to={`/profile/${author.username}`}>\n            <Avatar smallImg={author.avatar.small} online size={50}/>\n        </NavLink>\n        <Col verticalAlign={'center'}>\n            <NavLink to=\"/\">\n                <div className={classes.userName}>{author.firstName + ' ' + author.lastName}</div>\n            </NavLink>\n            <NavLink to={`/post/${id}`}>\n                <div className={classes.date}>posted on {date}</div>\n            </NavLink>\n        </Col>\n        <Space/>\n        {isAuthor && <Col>\n            <Row>\n                <Button type=\"text\" size=\"sm\">\n                    <Button.Icon><PencilFill color={colors.textMid} size={16}/></Button.Icon>\n                </Button>\n                <DeleteButton\n                    onDelete={onDelete}\n                    warningMessage={'Are you sure you want to delete this post?'}\n                />\n            </Row>\n        </Col>}\n    </Row>\n}\n","import React from 'react'\nimport classes from './PostText.module.scss'\nimport {Row} from 'components/_shared/Flex/Flex'\n\nexport const PostText: React.FC = ({children}) => {\n    return <Row padding={'10px 40px 30px'} verticalAlign={'start'} bordered={true}>\n        <div className={classes.text}>\n            {children}\n        </div>\n    </Row>\n}\n","import React from 'react'\nimport {Button} from 'components/_shared/Button/Button'\nimport {ChatSquareTextFill, Heart, HeartFill, ShareFill} from 'react-bootstrap-icons'\nimport colors from 'assets/styles/colors.module.scss'\nimport {UserItemDataType} from 'types/types'\nimport {Col, Row} from '../../_shared/Flex/Flex'\n\ntype PropsType = {\n    likes: UserItemDataType[]\n    isLiked: boolean,\n    onLikeClick: () => void\n    onCommentClick: () => void\n    onShareClick: () => void\n}\n\nexport const PostControls: React.FC<PropsType> = ({\n    likes,\n    isLiked,\n    onLikeClick,\n    onCommentClick,\n    onShareClick\n                                                  }) => {\n    return <Row verticalAlign={'center'}>\n        <Col bordered={true} padding={5} horizontalAlign={'center'} stretch>\n            <Button type=\"text\" size=\"sm\" onClick={onLikeClick}>\n                <Button.Text>{likes.length}</Button.Text>\n                {!isLiked && <Button.Icon><Heart color={colors.accent} size={16}/></Button.Icon>}\n                {isLiked && <Button.Icon><HeartFill color={colors.accent} size={16}/></Button.Icon>}\n            </Button>\n        </Col>\n        <Col bordered={true} padding={5} horizontalAlign={'center'} stretch>\n            <Button type=\"text\" size=\"sm\" onClick={onCommentClick}>\n                <Button.Icon><ChatSquareTextFill color={colors.accent} size={16}/></Button.Icon>\n            </Button>\n        </Col>\n        <Col bordered={true} padding={5} horizontalAlign={'center'} stretch>\n            <Button type=\"text\" size=\"sm\" onClick={onShareClick}>\n                <Button.Icon><ShareFill color={colors.accent} size={16}/></Button.Icon>\n            </Button>\n        </Col>\n    </Row>\n}\n","import React from 'react'\nimport classes from 'components/_forms/AddPostCommentForm/AddPostCommentForm.module.scss'\nimport {Form, FormRow} from 'components/_shared/Form/Form'\nimport {InputText} from 'components/_shared/Input/InputText/InputText'\nimport {Avatar} from 'components/_shared/Avatar/Avatar'\nimport {Button} from 'components/_shared/Button/Button'\nimport {NewCommentType} from 'types/types'\nimport {useSelector} from 'react-redux'\nimport {StateType} from 'redux/store'\nimport {NavLink} from 'react-router-dom'\n\ntype PropsType = {\n    disabled?: boolean,\n    onAddComment: (text: string) => void\n}\n\nconst AddPostCommentForm: React.FC<PropsType> = ({onAddComment, disabled= false}) => {\n    const authorizedUser = useSelector((state: StateType) => state.auth.user)\n\n    const submitHandler = (data: NewCommentType) => {\n        onAddComment(data.text)\n    }\n\n    return <Form onSubmit={submitHandler} initialValues={{text: ''}} resetAfterSubmit={true}>\n        <FormRow>\n            <div className={classes.avatar}>\n                {/*todo add component ButtonLink. Same button but with NavLink*/}\n                <NavLink to={`/profile/${authorizedUser?.username}`} tabIndex={disabled ? -1 : undefined}>\n                    <Avatar smallImg={authorizedUser?.avatar.small} size={30}/>\n                </NavLink>\n            </div>\n            <InputText name={'text'} placeholder={'Write a comment'} disabled={disabled}/>\n            <Button disabled={disabled}><Button.Text>Add</Button.Text></Button>\n        </FormRow>\n    </Form>\n}\n\nexport default AddPostCommentForm","import React from 'react'\nimport classes from 'components/Post/PostComments/PostComment/PostComment.module.scss'\nimport {CommentType} from 'types/types'\nimport {NavLink} from 'react-router-dom'\nimport {Avatar} from 'components/_shared/Avatar/Avatar'\nimport {formatDate} from 'utils/functions'\nimport {Button} from 'components/_shared/Button/Button'\nimport {Heart, PencilFill} from 'react-bootstrap-icons'\nimport colors from 'assets/styles/colors.module.scss'\nimport {Col, Row, Space} from 'components/_shared/Flex/Flex'\nimport {DeleteButton} from 'components/_shared/Button/DeleteButton/DeleteButton'\n\ntype PropsType = CommentType & {\n    disabled: boolean,\n    authorizedUserId?: string\n    onDelete: (commentId: string) => void\n}\n\nexport const PostComment: React.FC<PropsType> = ({\n                                                     _id,\n                                                     author,\n                                                     text,\n                                                     createdAt,\n                                                     likes,\n                                                     authorizedUserId,\n                                                     onDelete,\n                                                     disabled = false\n                                                 }) => {\n    const deleteHandler = () => {\n        onDelete(_id)\n    }\n\n    const isAuthor = authorizedUserId === author._id\n\n    return <Row padding={'10px 20px'} verticalAlign={'center'} gap={10} bordered={true}>\n            <NavLink to={`/profile/${author.username}`} tabIndex={disabled ? -1 : undefined}>\n                <Avatar smallImg={author.avatar.small} size={40}/>\n            </NavLink>\n            <Col gap={2}>\n                <NavLink to={`/profile/${author.username}`} tabIndex={disabled ? -1 : undefined}>\n                    <div className={classes.author}>{author.firstName} {author.lastName}</div>\n                </NavLink>\n                <div className={classes.date}>{formatDate(createdAt)}</div>\n            </Col>\n            <div className={classes.text}>\n                {text}\n            </div>\n            <Space/>\n            <Col>\n                <Row>\n                    <Button type=\"text\" size=\"sm\" disabled={disabled}>\n                        <Button.Icon><Heart color={colors.accent} size={16}/></Button.Icon>\n                    </Button>\n                    {isAuthor && <Button type=\"text\" size=\"sm\" disabled={disabled}>\n                        <Button.Icon><PencilFill color={colors.textMid} size={16}/></Button.Icon>\n                    </Button>}\n                    {isAuthor && <DeleteButton\n                        onDelete={deleteHandler}\n                        warningMessage={'Are you sure you want to delete comment?'}\n                        disabled={disabled}\n                    />}\n                </Row>\n            </Col>\n        </Row>\n}\n","import React from 'react'\nimport {NavLink} from 'react-router-dom'\nimport {Button} from '../Button'\n\ntype PropsType = {\n    route?: string\n    disabled?: boolean\n    onClick?: () => void\n}\n\nexport const ShowMoreButton: React.FC<PropsType> = ({\n                                                        children,\n                                                        route,\n                                                        disabled }) => {\n    return <>\n        {!!route && <NavLink to={route} tabIndex={disabled ? -1 : undefined}>\n            <Button type={'link'} disabled={disabled}><Button.Text>{children || 'Show more'}</Button.Text></Button>\n        </NavLink>}\n\n        {!route && <Button type={'link'} disabled={disabled}>\n            <Button.Text>{children || 'Show more'}</Button.Text>\n        </Button>}\n    </>\n}\n","import React from 'react'\nimport {CommentType} from '../../../../types/types'\nimport {PostComment} from '../PostComment/PostComment'\nimport {ShowMoreButton} from '../../../_shared/Button/ShowMoreButton/ShowMoreButton'\nimport {Row} from '../../../_shared/Flex/Flex'\n\ntype PostCommentsType = {\n    active: boolean\n    postId: string\n    authorizedUserId?: string\n    onDelete: (commentId: string) => void\n    comments: CommentType[]\n}\nexport const PostCommentsList: React.FC<PostCommentsType> = ({\n                                                                 active,\n                                                                 comments,\n                                                                 postId,\n                                                                 authorizedUserId,\n                                                                 onDelete\n                                                             }) => {\n    return <>\n        {comments\n            .slice()\n            .reverse()\n            .slice(0, 3)\n            .map(comment => <PostComment\n                key={comment._id}\n                {...comment}\n                authorizedUserId={authorizedUserId}\n                onDelete={onDelete}\n                disabled={!active}\n            />)}\n\n        {comments.length > 3 && <Row padding={5} horizontalAlign={'center'} bordered={true}>\n            <ShowMoreButton route={`/post/${postId}`} disabled={!active}/>\n        </Row>}\n    </>\n}\n","import React from 'react'\nimport classes from './PostComments.module.scss'\nimport classnames from 'classnames'\nimport AddPostCommentForm from 'components/_forms/AddPostCommentForm/AddPostCommentForm'\nimport {CommentType} from 'types/types'\nimport {PostCommentsList} from './PostCommentsList/PostCommentsList'\nimport {Row} from '../../_shared/Flex/Flex'\n\ntype PropsType = {\n    active: boolean\n    postId: string\n    authorizedUserId?: string\n    comments: CommentType[]\n    onAddCommentClick: (text: string) => void\n    onDeleteCommentClick: (commentId: string) => void\n}\n\nexport const PostComments: React.FC<PropsType> = ({\n                                                      active,\n                                                      postId,\n                                                      authorizedUserId,\n                                                      comments,\n                                                      onAddCommentClick,\n                                                      onDeleteCommentClick\n                                                  }) => {\n    return <div className={classnames(\n        classes.comments,\n        {[classes.active]: active}\n    )}>\n        <Row padding={'15px 30px'} bordered={true}>\n            <AddPostCommentForm onAddComment={onAddCommentClick} disabled={!active}/>\n        </Row>\n\n        <PostCommentsList\n            active={active}\n            comments={comments}\n            postId={postId}\n            authorizedUserId={authorizedUserId}\n            onDelete={onDeleteCommentClick}\n        />\n    </div>\n}\n","import React, {useState} from 'react'\nimport {Card} from 'components/_shared/Card/Card'\nimport {PostType} from 'types/types'\nimport {formatDate} from 'utils/functions'\nimport {PostHeader} from 'components/Post/PostHeader/PostHeader'\nimport {PostText} from 'components/Post/PostText/PostText'\nimport {PostControls} from 'components/Post/PostControls/PostControls'\nimport {PostComments} from 'components/Post/PostComments/PostComments'\n\n// todo: consider connecting to store here.\ntype PropsType = {\n    post: PostType\n    onPostAddLike: (id: string) => void\n    onPostDeleteLike: (id: string) => void\n    onPostDelete: (id: string) => void\n    authorizedUserId?: string\n    onAddComment: (postId: string, text: string) => void\n    onDeleteComment: (commentId: string) => void\n}\n\nconst Post: React.FC<PropsType> = ({\n                                       post,\n                                       onPostDelete,\n                                       onPostAddLike,\n                                       onPostDeleteLike,\n                                       authorizedUserId,\n                                       onAddComment,\n                                       onDeleteComment\n                                   }) => {\n    const [commentSectionActive, setCommentSectionActive] = useState(false)\n    const isAuthor = authorizedUserId === post.author._id\n    const date = formatDate(post.createdAt)\n    const isLiked = authorizedUserId ? post.likes.map(user => user._id).includes(authorizedUserId) : false\n\n    const postDeleteHandler = () => {\n        if (onPostDelete) onPostDelete(post._id)\n    }\n\n    const toggleLike = () => {\n        if (!isLiked) {\n            if (onPostAddLike) onPostAddLike(post._id)\n        } else {\n            if (onPostDeleteLike) onPostDeleteLike(post._id)\n        }\n    }\n\n    const addCommentHandler = (text: string) => {\n        onAddComment(post._id, text)\n    }\n\n    const deleteCommentHandler = (commentId: string) => {\n        onDeleteComment(commentId)\n    }\n\n    const toggleCommentSection = () => {\n        commentSectionActive ? setCommentSectionActive(false) : setCommentSectionActive(true)\n    }\n\n    return (\n        <Card>\n            <PostHeader\n                id={post._id}\n                date={date}\n                isAuthor={isAuthor}\n                author={post.author}\n                onDelete={postDeleteHandler}\n            />\n\n            <PostText>\n                {post.text}\n            </PostText>\n\n            <PostControls\n                likes={post.likes}\n                isLiked={isLiked}\n                onLikeClick={toggleLike}\n                onCommentClick={toggleCommentSection}\n                onShareClick={() => console.log('share clicked')}\n            />\n\n            <PostComments\n                postId={post._id}\n                authorizedUserId={authorizedUserId}\n                comments={post.comments}\n                active={commentSectionActive}\n                onAddCommentClick={addCommentHandler}\n                onDeleteCommentClick={deleteCommentHandler}\n            />\n\n        </Card>\n    )\n}\n\nexport default Post\n","import React, {useEffect} from 'react'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {useParams} from 'react-router-dom'\nimport {StateType} from 'redux/store'\nimport {\n    addPostComment,\n    addPostLike,\n    deletePost,\n    deletePostComment,\n    deletePostLike,\n    getPost\n} from 'redux/reducers/posts.reducer'\nimport Post from 'components/Post/Post'\n\n\nconst PostPage: React.FC = () => {\n    const {id}: { id: string } = useParams()\n    const dispatch = useDispatch()\n    const post = useSelector((state: StateType) => state.posts.posts[0])\n    const authorizedUserId = useSelector((state: StateType) => state.auth.user?._id)\n\n    useEffect(() => {\n        dispatch(getPost(id))\n    }, [dispatch, id])\n\n    const postAddLikeHandler = (postId: string) => {\n        dispatch(addPostLike(postId))\n    }\n\n    const postDeleteLikeHandler = (postId: string) => {\n        dispatch(deletePostLike(postId))\n    }\n\n    const onPostDelete = (id: string) => {\n        dispatch(deletePost(id))\n    }\n\n    const addCommentHandler = (postId: string, text: string) => {\n        dispatch(addPostComment(postId, text))\n    }\n    const deleteCommentHandler = (commentId: string) => {\n        dispatch(deletePostComment(commentId))\n    }\n\n    return <>\n        {post && <Post\n            key={post._id}\n            post={post}\n            authorizedUserId={authorizedUserId}\n            onPostAddLike={postAddLikeHandler}\n            onPostDeleteLike={postDeleteLikeHandler}\n            onPostDelete={onPostDelete}\n            onAddComment={addCommentHandler}\n            onDeleteComment={deleteCommentHandler}\n        />}\n    </>\n}\n\nexport default PostPage"],"sourceRoot":""}