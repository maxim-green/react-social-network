/post:
  get:
    summary: Get list of post
    description: Get list of post
    tags:
      - post
    parameters:
      - in: query
        name: author
        description: If this parameter is passed response will be list of post with specific author
        required: false
    responses:
      200:
        description: User profile data
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/SuccessfulResponse'
                - type: object
                  properties:
                    data:
                      type: object
                      properties:
                        posts:
                          type: array
                          items:
                            $ref: '#/components/schemas/Post'
      500:
        $ref: '#/components/responses/ServerError'

  post:
    summary: Add new post
    description: Adds new post. Request must be authorized.
    tags:
      - post
    requestBody:
      required: true
      description: Post text must be provided by user
      content:
        application/json:
          schema:
            type: object
            properties:
              text:
                type: string
    responses:
      200:
        description: Created post
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/SuccessfulResponse'
                - type: object
                  properties:
                    data:
                      type: object
                      properties:
                        post:
                          $ref: '#/components/schemas/Post'
      401:
        $ref: '#/components/responses/Unauthorized'
      500:
        $ref: '#/components/responses/ServerError'

/post/feed:
  get:
    summary: Get feed post
    description: Get list of post of users wich is in authorized user subscriptions
    tags:
      - post
    responses:
      200:
        description: Posts of subscriptions
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/SuccessfulResponse'
                - type: object
                  properties:
                    data:
                      type: object
                      properties:
                        posts:
                          type: array
                          items:
                            $ref: '#/components/schemas/Post'
      500:
        $ref: '#/components/responses/ServerError'

/post/:id:
  get:
    summary: Get post
    description: Get post by id
    tags:
      - post
    parameters:
      - in: path
        name: id
        description: Id of requested post
    responses:
      200:
        description: Post data.
        content:
          application/json:
            schema:
              allOf:
                  - $ref: '#/components/schemas/SuccessfulResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          post:
                            $ref: '#/components/schemas/Post'
      404:
        $ref: '#/components/responses/NotFound'
      500:
        $ref: '#/components/responses/ServerError'

  delete:
    summary: Delete post
    description: Delete post by post id. Request must be authorized. User must be author of the post.
    tags:
      - post
    parameters:
      - in: path
        name: id
        description: Id of post that will be deleted
    responses:
      200:
        $ref: '#/components/responses/Success'
      401:
        $ref: '#/components/responses/Unauthorized'
      403:
        $ref: '#/components/responses/Forbidden'
      404:
        $ref: '#/components/responses/NotFound'
      500:
        $ref: '#/components/responses/ServerError'